package com.five.managesystem.login.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import javax.servlet.http.HttpServletRequest;
import org.apache.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.five.managesystem.common.util.CommonUtils;
import com.five.managesystem.common.util.LocaleUtils;
import com.five.managesystem.common.util.ReturnResult;
import com.five.managesystem.log.annotation.Log;
import com.five.managesystem.login.entity.LoginVo;
import com.five.managesystem.user.service.UserService;

@Controller
@RequestMapping("/web")
public class LoginController {
	@Autowired private UserService service;
	protected Logger logger = Logger.getLogger(LoginController.class);
	/**
	 * 用户登录
	 * @param user 登录用户实体类（@Validated spring注解 用于参数校验）
	 * @param binding 捆绑结果，用于保存参数校验的结果
	 * @param request 请求信息
	 * @return  ReturnResult json信息
	 */
	@Log(operationType="login",operationName="用户登录")
	@ResponseBody
	@RequestMapping("login")
	public ReturnResult login(@Validated LoginVo user,BindingResult binding,HttpServletRequest request){
		
		 ReturnResult result = new ReturnResult();
		 /*参数验证有错*/
		 if (binding.hasFieldErrors()){
			 result.setState(5);
			 result.setMessages(CommonUtils.getErrors(binding));
			 return result;
		 }
		 /*获取捆绑数据源*/
		 ResourceBundle bundle = LocaleUtils.getResourceBundle(request);
		/*获取shiro主体*/
		 Subject subject = SecurityUtils.getSubject();	
		 try{
			/*登录验证和授权*/
			subject.login(new UsernamePasswordToken(user.getUsername(),user.getPassword()));
			 
			 if(subject.isAuthenticated()){//成功登录					
				 HashMap<String,String> map =  new HashMap<>();
				 Map<?,?> currentUser  =  (Map<?, ?>) subject.getPrincipal();
				 String userName = currentUser.get("LOGIN_NAME").toString();
				 map.put("username", userName);
				 logger.info("当前登录用户："+userName);			
				 subject.getSession().setAttribute(userName, currentUser);				 			
				 result.setData(map);
				 result.setState(0);
				 result.setMessages(bundle.getString("Login.success"));
				 
				 //获取IP
				 String ip = "";
				 if (request.getHeader("x-forwarded-for") == null) { 
					 ip = request.getRemoteAddr(); 
				 } else{
					 ip =  request.getHeader("x-forwarded-for"); 
				 }
				 
				 if (service.updateLoginInfoById(currentUser,ip) > 0){
					 logger.info("updateLoginInfoById success");
				 }else{
					 logger.info("updateLoginInfoById error");
				 }				 
				 logger.info(result);
			 }
		
		 }catch(LockedAccountException e){
			 result.setState(1);
			 String info = bundle.getString("Login.locked");
			 result.setMessages(info);
			 logger.error(info,e);
			 return result;
		 }catch(UnknownAccountException e){
			 result.setState(2);
			 String info = bundle.getString("Login.name");
			 result.setMessages(info);
			 logger.error(info,e);
			 return result;
		 }catch(AuthenticationException e){
			 result.setState(3);
			 String info = bundle.getString("Login.password");
			 result.setMessages(info);
			 logger.error(info,e);
			 return result;
		 }catch(Exception e){
			 result.setState(4);
			 String info = bundle.getString("Login.exception");
			 result.setMessages(info);
			 logger.error(info,e);
			 return result;
		 }

		 
		return result;
	}
	/**
	 * 获取登录信息(目前的设计不周全，仅仅用来测试而已)
	 * @return
	 */
	@RequestMapping("get_loginInfo")
	@ResponseBody
	public Object getLoginInfo() {
		@SuppressWarnings("unchecked")
		Map<Object,Object> user = (Map<Object, Object>) SecurityUtils.getSubject().getPrincipal();		
		Map<Object,Object> userInfo = new HashMap<Object, Object>();
		if( user == null ) {
			userInfo.put("loginName", "游客");
		}else {
			userInfo.put("loginName", user.get("LOGIN_NAME"));
		}
		return userInfo;
	}
	@RequestMapping("login_out")
	@ResponseBody
	public ReturnResult loginOut() {
		Subject subject = SecurityUtils.getSubject(); 
		@SuppressWarnings("unchecked")
		Map<Object,Object> user = (Map<Object, Object>) subject.getPrincipal();		
        try {
        	if( subject.isAuthenticated() ) {
        		  subject.logout();
                  logger.info("用户："+user.get("LOGIN_NAME")+"退出登录");
        	}         
        } catch (Exception ise) {
            ise.printStackTrace();
        }
		return new ReturnResult(ReturnResult.STATE_OK);		
	}
}
